/**
 * @file SimSettings.hoc
 * @brief To help co-ordinating simulations with NEURON and CoreNEURON.
 * @remark Copyright Â© BBP/EPFL 2005-2017; All rights reserved. Do not distribute without further notice.
 */

{load_file("RNGSettings.hoc")}

simulatorMode = 0  // corresponds to NEURON
objref coreneuronDataDir


begintemplate SimSettings

public init, interpret, execResult
public getSimulatorMode, generateData, runNeuron, getCoreneuronDataDir
public NEURON, CORENEURON, NEURON_CORENEURON

external simulatorMode, coreneuronDataDir
objref this

/* BlueConfig can specify simulator mode : NEURON, CORENEURON or NEURON_CORENEURON
 *
 * NEURON     : Run simulation using NEURON (current default behaviour)
 * CORENEURON : Build model with NEURON, dump dataset to disk and continue simulation with CoreNEURON
 * NEURON_CORENEURON : Build model with NEURON, dump dataset to disk, run simulation with NEURON
 *       and also run same simulation with CoreNEURON. This is more for debugging purpose and
 *       comparing results between two simulators.
 */

// constants for simulation mode handling
proc init() {
    NEURON = 0
    CORENEURON = 1
    NEURON_CORENEURON = 2
}

/**
 * Given the Run block from a BlueConfig, check simulator to be used
 * $o1 ParsedRun from a BlueConfig (type is Map)
 */
proc interpret() { localobj runInfo, pc, rng, rngInfo, commandString
    strdef simulatorField
    runInfo = $o1

    pc = new ParallelContext()

    // NEURON is default simulator
    simulatorMode = NEURON
    simulatorField = ""

    // check if simulator option is set in BlueConfig, abort if invalid
    if( runInfo.exists( "SimulatorMode" ) ) {
        simulatorField = runInfo.get( "SimulatorMode" ).s
        if( strcmp( simulatorField, "NEURON" ) == 0 ) {
            simulatorMode = NEURON
        } else if( strcmp( simulatorField, "CORENEURON" ) == 0 ) {
            simulatorMode = CORENEURON
        } else if( strcmp( simulatorField, "NEURON_CORENEURON" ) == 0 ) {
            simulatorMode = NEURON_CORENEURON
        } else {
            if( pc.id() == 0 ) {
                print "Invalid SimulatorMode '", simulatorField, "'; use NEURON, CORENEURON or NEURON_CORENEURON. Terminating"
            }
            pc.barrier()
            quit()
        }
    }

    // CoreNEURON only supports Random123, check if BlueConfig has compatible RNGMode
    // if so, create directory for dumping dataset into separate directory inside OutputRoot
    if( simulatorMode != NEURON ) {
        rngInfo = new RNGSettings()
        if( rngInfo.getRNGMode() != rngInfo.RANDOM123 ) {
            if( pc.id() == 0 ) {
                print "SimulatorMode '", simulatorField, "' requires RNGMode Random123 in BlueConfig"
            }
            pc.barrier()
            quit()
        }

        // create directory for dumping coreneuron binary dataset
        coreneuronDataDir = new String()
        sprint(coreneuronDataDir.s, "%s/coreneuron_data", runInfo.get( "OutputRoot" ).s )
        if( pc.id() == 0 ) {
            commandString = new String()
            execResult = 0
            sprint( commandString.s, "%s.execResult = checkDirectory( \"%s\" )", this, coreneuronDataDir.s )
            execute( commandString.s )
            if( execResult < 0 ) {
                execerror( "Error while creating directory '", coreneuronDataDir.s, "'.  Terminating." )
            }
        }
    }

    if( pc.id() == 0 ) {
        if( strcmp( simulatorField, "") == 0) {
            print "SimulatorMode not set, using NEURON simulator"
        } else {
            print "SimulatorMode set to '", simulatorField, "'"
        }
    }

    // TODO: Add code to dump command line arguments file for CoreNEURON

    pc.barrier()
}

func getSimulatorMode() {
    return simulatorMode
}

// NEURON simulator mode doesn't need data generation
func generateData() {
    return (simulatorMode != NEURON)
}

// Don't run NEURON if "exclusive" CoreNEURON mode specified
func runNeuron() {
    return (simulatorMode != CORENEURON)
}

// Directory where data will be dumped for CoreNEURON
obfunc getCoreneuronDataDir() {
    return coreneuronDataDir
}

endtemplate SimSettings
