/**
 * @file    SynReaders.hoc
 * @brief   Hoc Templates encapsulating the possible synapse readers
 *
 * @author  Fernando Pereira
 *
 */

// Note: This file is imported from SynapseRuleManager
// where all dependencies are met


/*****************************************************************************
 * SYNAPSE READER Using the new SynTool reader
 *****************************************************************************/

begintemplate SynReaderSynTool

public loadSynapseParameters, isEnabled, dbg

objref synapseReader, this


/**
 * @param $s1 Name of Synapse file or directory (nrn) to open.
 */
proc init()  {
    verbose = 0
    dbg = 0
    if (numarg() == 2) verbose = $2

    synapseReader = new SynapseReader($s1, verbose)

    if (synapseReader.modEnabled()) {
        hasNrrpField = synapseReader.hasNrrpField()
        if (verbose) print "[SynReader] SynapseTool ENABLED. Has NRRP field?: ", hasNrrpField
    } else {
        hasNrrpField = -1
        if (verbose) print "[SynReader] SynapseTool DISABLED"
    }
}


func isEnabled() {
    return synapseReader.modEnabled()
}


/*!
 * Read the specified dataset from the nrn.h5 file to get all synapse parameters for a post-synaptic cell
 *
 * @param $1 gid of the target cell whose data is needed
 * @return List populated by SynapseParameters objects
 */
obfunc loadSynapseParameters() { local gid, nSyn, synIdx  localobj synParamsList, tmpParams, activeSynParams
    gid = $1 - 1 // zero based
    synParamsList = new List()

    nSyn = synapseReader.loadSynapses(gid)
    if (nSyn < 1) {
        return synParamsList
    }

    tmpParams = new Vector(12)

    if(dbg) printf("Loading %d synapses for Post-Neuron %d:\n", nSyn, gid)

    for synIdx=0, nSyn-1 {
        synapseReader.getSynapse(synIdx, tmpParams)

        // compensate for minor floating point inaccuracies in the delay
        tmpParams.x[1] = int(tmpParams.x[1]/dt + 1e-5)*dt
        // make it 1-based as neurodamus expects
        tmpParams.x[0] += 1

        if(!hasNrrpField)  { // No rrp field, we will end up with 11 fields only
             tmpParams.append(-1)
        }

        activeSynParams = new SynapseParameters(tmpParams)
        synParamsList.append(activeSynParams)
    }

    return synParamsList
}


endtemplate SynReaderSynTool



/*****************************************************************************
 * SYNAPSE READER Using the plain HDF5 reader
 *****************************************************************************/

begintemplate SynReaderHdf5

external timeit, prtime, timeit_init, timeit_setVerbose, timeit_register, timeit_start, timeit_add

public loadSynapseParameters, dbg

objref synapseReader, this


/*!
 * @param $s1 Root name of Synapse file(s) to open.
 * @param $2 nSynapseFiles - The number of synapse files
 * @param $o3 targetManager - The target manager
 */
proc init() { local timeID, verboseLevel  localobj connectTemp, targetManager
    strdef synapseFile
    dbg = 0

    sprint(synapseFile, "%s", $s1)
    nSynapseFiles = $2
    targetManager = $o3

    timeID = timeit_register("file read")
    timeit_start(timeID)

    synapseReader = new HDF5Reader(synapseFile, nSynapseFiles, 0)
    timeit_add(timeID)

    if (nSynapseFiles > 1) {
        timeID = timeit_register("syn exchange")
        timeit_start(timeID)
        synapseReader.exchangeSynapseLocations(targetManager.cellDistributor.getGidListForProcessor())
        timeit_add(timeID)
    }

    nrnVersion = synapseReader.checkVersion()

}



/*!
 * Read the specified dataset from the nrn.h5 file to get all synapse parameters for a post-synaptic cell
 *
 * @param $1 gid of the cell whose data is needed
 * @return $o2 List populated by SynapseParameters objects read from the nrn.h5 file
 */
obfunc loadSynapseParameters() { local gid, ret, nSyn, synIndex  localobj synParamsList, activeSynParams, tmpParams
    strdef cellName
    sprint(cellName, "a%d", $1)

    synParamsList = new List()
    tmpParams = new Vector()
    tmpParams.resize(12)

    if (nSynapseFiles > 1) {
        ret = synapseReader.loadData($1)
    } else {
        ret = synapseReader.loadData(cellName)
    }

    if (ret < 0) {
        return synParamsList
    }

    nSyn = synapseReader.numberofrows(cellName)

    if (dbg) printf("Loading synapses for Post-Neuron %d:\n", gid)

    if (nSyn > 0) {
        for synIndex=0, nSyn-1 {

            tmpParams.x[0] = synapseReader.getData( cellName, synIndex, 0 )  //sgid
            tmpParams.x[1] = synapseReader.getData( cellName, synIndex, 1 )  //delay
            tmpParams.x[2] = synapseReader.getData( cellName, synIndex, 2 )  //isec
            tmpParams.x[3] = synapseReader.getData( cellName, synIndex, 3 )  //ipt
            tmpParams.x[4] = synapseReader.getData( cellName, synIndex, 4 )  //offset
            tmpParams.x[5] = synapseReader.getData( cellName, synIndex, 8 )  //weight
            tmpParams.x[6] = synapseReader.getData( cellName, synIndex, 9 )  //U
            tmpParams.x[7] = synapseReader.getData( cellName, synIndex, 10 ) //D
            tmpParams.x[8] = synapseReader.getData( cellName, synIndex, 11 ) //F
            tmpParams.x[9] = synapseReader.getData( cellName, synIndex, 12 ) //DTC
            tmpParams.x[10] = synapseReader.getData( cellName, synIndex, 13 )//isynType

            // if using newer version, we can read nrrp (older version had A_SE in column)
            if (nrnVersion > 4) {
                tmpParams.x[11] = synapseReader.getData( cellName, synIndex, 17 ) //nrrp
            } else {
                tmpParams.x[11] = -1
            }

            //compensate for minor floating point inaccuracies in the delay
            tmpParams.x[1] = int(tmpParams.x[1]/dt + 1e-5)*dt

            activeSynParams = new SynapseParameters(tmpParams)
            synParamsList.append(activeSynParams)
        }
    }

    return synParamsList
}

endtemplate SynReaderHdf5
