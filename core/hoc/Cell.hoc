{load_file("import3d.hoc")}

begintemplate Cell
public init, printInfo, AddMorphNL, getCCell, setCCell, geom_nsec, geom_nseg_lambda, geom_nseg_fixed, SetCellProperties, connect2target, delete_axon, insertChannel
public soma, dend, apic, axon, nSecAxonal, nSecAxonalOrig, segCounts, rnglist
public synlist, all, apical, basal, somatic, axonal, gid, nSecAll, nSecSoma, nSecApical, nSecBasal, clear, ASCIIrpt, HDF5rpt, APC
objref synlist, all, apical, basal, somatic, axonal, this, CCellRef, ASCIIrpt, HDF5rpt, APC, segCounts, rnglist

//! Used when computing nseg per section
external lambda_f

/*!
 * Constructor to create a Cell object usable in the bbp toolchain
 *
 * @param $1 gid [optional] Unique identifier for this cell if it to be used in a network
 * @param $s2 full path to morphology [optional] file to load in cell's geometric information
 */
proc init() {
    gid     = 0
    all     = new SectionList()
    somatic = new SectionList()
    basal   = new SectionList()
    apical  = new SectionList()
    axonal  = new SectionList()
    forall delete_section()
    if(numarg()>0) gid = $1
    if(numarg()>1){
        AddMorphNL($s2)
    }
    
    synlist = new List()
    rnglist = new List()
}
create soma[1], dend[1], apic[1], axon[1]

proc AddMorphNL(){ localobj nl, import
    forall delete_section()    
    nl = new Import3d_Neurolucida3()
    nl.quiet = 1
    nl.input($s1)
    import = new Import3d_GUI(nl, 0)
    import.instantiate(this)
    indexSections(import)
    geom_nsec()
}


proc delete_axon(){local nSec, L1, L2, D1, D2,i1, i2, nSeg1, nSeg2 localobj sTmp    
    sTmp = new String()
    nSec=0
    forsec axonal {nSec = nSec + 1}
    nSec=0    
    forsec axonal {
        if(nSec == 0){
            L1      = L
            D1      = diam
            if(L<5) {
        nSeg1 = nseg
        } else {
                nSeg1   = int(L/5)
        }
            i1      = v(0.0001)
        }
        if(nSec == 1){
            L2      = L
            D2      = diam
            if(L<5) {
        nSeg2 = nseg
            } else {
                nSeg2   = int(L/5)
            }
            i2      = v(0.0001)
        }
        nSec = nSec + 1
    }
    forsec axonal{delete_section()}    
    execute1("create axon[2]\n", this)
    
    access axon[0]{
        L= 10
        diam = 0.5
        nseg =1
        v(0.0001) = i1
    }
    access axon[1]{
        L= 10
        diam = 0.5
        nseg =1
        v(0.0001) = i1
    }
    if(nSec >0)  {
        access axon[0]{
            L       = L1
            diam    = D1
            nseg    = nSeg1
            axonal.append()
            all.append()
        }
    }
    if(nSec >1)  {
        access axon[1]{
            L       = L2
            diam    = D2
            nseg    = nSeg2
            v(0.0001) = i2
            axonal.append()
            all.append()
        }
    }else {
        print "Error in Morphology: No axon section[1] found"
        //execerror("failure in delete_axon()")
    }
    nSecAxonal = 2
    soma[0] connect axon[0](0), 1
    axon[0] connect axon[1](0), 1
}


/*!
 * Iterate over the section and compute how many sqgments should be allocate to each.  This number
 * is influenced by the mechanisms distributed, so this function should be called after assigning biophys
 */
proc geom_nseg_lambda() { local secIndex
    soma area(.5) // make sure diam reflects 3d points
    
    secIndex=0
    forsec all {
        nseg = int((L/(0.1*lambda_f(100))+.9)/2)*2 + 1
        
        segCounts.x[secIndex] = nseg
        secIndex = secIndex+1
    }
}

/*!
 * Iterate over the section and compute how many sqgments should be allocate to each.  This number
 * is influenced by the mechanisms distributed, so this function should be called after assigning biophys
 */
proc geom_nseg_fixed() { local secIndex
    soma area(.5) // make sure diam reflects 3d points
    
    secIndex=0
    forsec all {
        nseg = 1 + 2*int(L/40)
        
        segCounts.x[secIndex] = nseg
        secIndex = secIndex+1
    }
}

/*!
 * Count up the number of sections. Additionally, assign as estimate to the nseg var of each section, but this
 * will most likely change after biophys are assigned and geom_nseg called
 */
proc geom_nsec() { local nSec
    nSec = 0
    forsec all {        
        nSec = nSec + 1        
    }
    nSecAll = nSec
    nSec = 0
    forsec somatic { nSec = nSec + 1}
    nSecSoma    =   nSec
    nSec = 0
    forsec apical { nSec = nSec + 1}
    nSecApical=     nSec
    nSec = 0
    forsec basal { nSec = nSec + 1}
    nSecBasal   =   nSec
    nSec = 0
    forsec axonal { nSec = nSec + 1}
    nSecAxonalOrig = nSecAxonal = nSec
    
    segCounts = new Vector()
    segCounts.resize(nSecAll)
    nSec=0
    forsec all {
        segCounts.x[nSec] = nseg
        nSec = nSec+1
    }
}

obfunc getCCell(){
    return CCellRef
}
proc setCCell(){
    CCellRef = $o1
}

//-----------------------------------------------------------------------------------------------

/*!
 * Assign section indices to the section voltage value.  This will be useful later for serializing 
 * the sections into an array.  Note, that once the simulation begins, the voltage values will revert to actual data again.
 *
 * @param $o1 Import3d_GUI object
 */
proc indexSections() { local index  localobj tmpString, s
    tmpString = new String()

    s = $o1.swc.sections
    for i=0, s.count()-1 {
        $o1.name( s.object(i), tmpString.s )
        sprint( tmpString.s, "%s.v(0.0001) = %d", tmpString.s, i )
        execute( tmpString.s, this )
    }
}

//-----------------------------------------------------------------------------------------------

/*!
 * When clearing the model, the circular reference between Cells and CCells must be broken so the 
 * entity watching reference counts can work.
 */
proc clear() { localobj nil
    CCellRef.CellRef = nil
    //CCellRef = nil
}

//-----------------------------------------------------------------------------------------------

/*!
 * @param $o1 NetCon source (can be nil)
 * @param $o2 Variable where generated NetCon will be placed
 */
proc connect2target() { //$o1 target point process, $o2 returned NetCon
  soma $o2 = new NetCon(&v(1), $o1)
  $o2.threshold = -30
}

proc insertChannel(){ localobj tmpString
    tmpString = new String()
    sprint(tmpString.s, "forsec %s  insert %s", $s1, $s2)
    execute(tmpString.s, this)
}

endtemplate Cell
